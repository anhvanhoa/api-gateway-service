package main

import (
	"fmt"
	"go/ast"
	"go/parser"
	"go/token"
	"log"
	"os"
	"os/exec"
	"path/filepath"
	"strings"
)

type ServiceInfo struct {
	PackageName string
	ServiceName string
	HandlerName string
	ImportPath  string
	ConfigName  string
	Folder      string
}

type ServiceConfig struct {
	Name   string `mapstructure:"name"`
	Route  string `mapstructure:"route"`
	Host   string `mapstructure:"host"`
	Port   string `mapstructure:"port"`
	Folder string `mapstructure:"folder"`
}

type Env struct {
	NodeEnv  string          `mapstructure:"node_env"`
	Port     int             `mapstructure:"port"`
	Services []ServiceConfig `mapstructure:"services"`
}

func main() {
	fmt.Println("üöÄ B·∫Øt ƒë·∫ßu qu√° tr√¨nh generate...")

	// B∆∞·ªõc 1: Update th∆∞ vi·ªán sf-proto
	fmt.Println("üì¶ ƒêang update th∆∞ vi·ªán sf-proto...")
	if err := updateLibrary(); err != nil {
		log.Fatalf("L·ªói khi update th∆∞ vi·ªán: %v", err)
	}
	fmt.Println("‚úÖ ƒê√£ update th∆∞ vi·ªán sf-proto th√†nh c√¥ng")

	// B∆∞·ªõc 2: ƒê·ªçc config v√† qu√©t qua Env.Services
	fmt.Println("üîç ƒêang ƒë·ªçc config v√† qu√©t qua Env.Services...")
	services, err := scanServicesFromConfig()
	if err != nil {
		log.Fatalf("L·ªói khi ƒë·ªçc config v√† qu√©t services: %v", err)
	}
	fmt.Printf("‚úÖ T√¨m th·∫•y %d services t·ª´ config\n", len(services))

	// B∆∞·ªõc 3: T√¨m c√°c Register*ServiceHandler
	fmt.Println("üîç ƒêang t√¨m c√°c Register*ServiceHandler...")
	handlers, err := findServiceHandlers(services)
	if err != nil {
		log.Fatalf("L·ªói khi t√¨m service handlers: %v", err)
	}
	fmt.Printf("‚úÖ T√¨m th·∫•y %d service handlers\n", len(handlers))

	// B∆∞·ªõc 4: T·∫°o file service_handlers.go
	fmt.Println("üìù ƒêang t·∫°o file service_handlers.go...")
	if err := createServiceHandlersFile(handlers); err != nil {
		log.Fatalf("L·ªói khi t·∫°o service_handlers.go: %v", err)
	}
	fmt.Println("‚úÖ ƒê√£ t·∫°o file service_handlers.go th√†nh c√¥ng")

	// B∆∞·ªõc 5: Copy swagger files
	fmt.Println("üìÅ ƒêang copy swagger files...")
	if err := copySwaggerFiles(handlers); err != nil {
		log.Fatalf("L·ªói khi copy swagger files: %v", err)
	}
	fmt.Println("‚úÖ ƒê√£ copy swagger files th√†nh c√¥ng")

	fmt.Println("üéâ Ho√†n th√†nh qu√° tr√¨nh generate!")
}

func updateLibrary() error {
	cmd := exec.Command("go", "get", "-u", "github.com/anhvanhoa/sf-proto")
	cmd.Stdout = os.Stdout
	cmd.Stderr = os.Stderr
	return cmd.Run()
}

func scanServicesFromConfig() ([]ServiceInfo, error) {
	var services []ServiceInfo

	// ƒê·ªçc config file
	configPath := "dev.config.yml"
	if _, err := os.Stat("prod.config.yml"); err == nil {
		configPath = "prod.config.yml"
	}

	// Parse YAML config (ƒë∆°n gi·∫£n h√≥a - ch·ªâ ƒë·ªçc folder t·ª´ config)
	content, err := os.ReadFile(configPath)
	if err != nil {
		return nil, fmt.Errorf("kh√¥ng th·ªÉ ƒë·ªçc config file: %v", err)
	}

	// Parse YAML ƒë·ªÉ l·∫•y services
	env, err := parseConfigYAML(string(content))
	if err != nil {
		return nil, fmt.Errorf("kh√¥ng th·ªÉ parse config: %v", err)
	}

	// L·∫∑p qua c√°c services trong config
	for _, serviceConfig := range env.Services {
		if serviceConfig.Folder == "" {
			fmt.Printf("‚ö†Ô∏è  B·ªè qua service '%s' - kh√¥ng c√≥ folder\n", serviceConfig.Name)
			continue
		}

		// T·∫°o ƒë∆∞·ªùng d·∫´n import: github.com/anhvanhoa/sf-proto/gen/folder/v1
		importPath := fmt.Sprintf("github.com/anhvanhoa/sf-proto/gen/%s/v1", serviceConfig.Folder)

		// Ki·ªÉm tra xem service c√≥ t·ªìn t·∫°i kh√¥ng
		serviceInfo, err := checkServiceExists(importPath, serviceConfig)
		if err != nil {
			fmt.Printf("‚ö†Ô∏è  B·ªè qua service '%s' - kh√¥ng t√¨m th·∫•y: %v\n", serviceConfig.Name, err)
			continue
		}

		services = append(services, *serviceInfo)
		fmt.Printf("‚úÖ T√¨m th·∫•y service: %s (%s)\n", serviceConfig.Name, importPath)
	}

	return services, nil
}

func parseConfigYAML(content string) (*Env, error) {
	// Parse YAML ƒë∆°n gi·∫£n ƒë·ªÉ l·∫•y services
	env := &Env{}

	// T√¨m section services
	lines := strings.Split(content, "\n")
	inServices := false
	var services []ServiceConfig
	var currentService ServiceConfig

	for _, line := range lines {
		line = strings.TrimSpace(line)

		if line == "services:" {
			inServices = true
			continue
		}

		if inServices {
			// N·∫øu g·∫∑p d√≤ng b·∫Øt ƒë·∫ßu v·ªõi "- name:" th√¨ b·∫Øt ƒë·∫ßu service m·ªõi
			if strings.HasPrefix(line, "- name:") {
				if currentService.Name != "" {
					services = append(services, currentService)
				}
				currentService = ServiceConfig{}
				currentService.Name = strings.TrimSpace(strings.TrimPrefix(line, "- name:"))
			} else if strings.HasPrefix(line, "name:") {
				currentService.Name = strings.TrimSpace(strings.TrimPrefix(line, "name:"))
			} else if strings.HasPrefix(line, "host:") {
				currentService.Host = strings.TrimSpace(strings.TrimPrefix(line, "host:"))
			} else if strings.HasPrefix(line, "port:") {
				currentService.Port = strings.TrimSpace(strings.TrimPrefix(line, "port:"))
			} else if strings.HasPrefix(line, "route:") {
				currentService.Route = strings.TrimSpace(strings.TrimPrefix(line, "route:"))
			} else if strings.HasPrefix(line, "folder:") {
				currentService.Folder = strings.TrimSpace(strings.TrimPrefix(line, "folder:"))
			} else if line == "" || strings.HasPrefix(line, "#") {
				// B·ªè qua d√≤ng tr·ªëng ho·∫∑c comment
				continue
			} else if !strings.HasPrefix(line, " ") && !strings.HasPrefix(line, "\t") {
				// N·∫øu kh√¥ng ph·∫£i indent th√¨ k·∫øt th√∫c services section
				break
			}
		}
	}

	// Th√™m service cu·ªëi c√πng
	if currentService.Name != "" {
		services = append(services, currentService)
	}

	env.Services = services
	return env, nil
}

func checkServiceExists(importPath string, serviceConfig ServiceConfig) (*ServiceInfo, error) {
	// T√¨m th∆∞ m·ª•c c·ªßa module trong go mod cache
	cmd := exec.Command("go", "list", "-m", "-f", "{{.Dir}}", "github.com/anhvanhoa/sf-proto")
	output, err := cmd.Output()
	if err != nil {
		return nil, fmt.Errorf("kh√¥ng th·ªÉ t√¨m th∆∞ m·ª•c sf-proto: %v", err)
	}

	// T·∫°o ƒë∆∞·ªùng d·∫´n ƒë·∫øn th∆∞ m·ª•c service
	serviceDir := filepath.Join(strings.TrimSpace(string(output)), "gen", serviceConfig.Folder, "v1")

	// Ki·ªÉm tra xem th∆∞ m·ª•c c√≥ t·ªìn t·∫°i kh√¥ng
	if _, err := os.Stat(serviceDir); os.IsNotExist(err) {
		return nil, fmt.Errorf("th∆∞ m·ª•c service kh√¥ng t·ªìn t·∫°i: %s", serviceDir)
	}

	// T√¨m file .go trong th∆∞ m·ª•c service
	goFiles, err := filepath.Glob(filepath.Join(serviceDir, "*.go"))
	if err != nil {
		return nil, fmt.Errorf("kh√¥ng th·ªÉ qu√©t file .go: %v", err)
	}

	// T√¨m Register*ServiceHandler trong c√°c file
	var handlerName string
	var packageName string

	for _, goFile := range goFiles {
		serviceInfo, err := parseGoFile(goFile)
		if err != nil {
			continue
		}
		if serviceInfo != nil && serviceInfo.HandlerName != "" {
			handlerName = serviceInfo.HandlerName
			packageName = serviceInfo.PackageName
			break
		}
	}

	if handlerName == "" {
		return nil, fmt.Errorf("kh√¥ng t√¨m th·∫•y Register*ServiceHandler trong %s", serviceDir)
	}

	// T·∫°o service name t·ª´ config name
	serviceName := strings.ReplaceAll(serviceConfig.Name, " ", "_")
	serviceName = strings.ToLower(serviceName)

	return &ServiceInfo{
		PackageName: packageName,
		ServiceName: serviceName,
		HandlerName: handlerName,
		ImportPath:  importPath,
		ConfigName:  serviceConfig.Name,
		Folder:      serviceConfig.Folder,
	}, nil
}

func parseGoFile(filePath string) (*ServiceInfo, error) {
	fset := token.NewFileSet()
	node, err := parser.ParseFile(fset, filePath, nil, parser.ParseComments)
	if err != nil {
		return nil, err
	}

	var serviceInfo *ServiceInfo

	ast.Inspect(node, func(n ast.Node) bool {
		switch x := n.(type) {
		case *ast.FuncDecl:
			// T√¨m c√°c function Register*ServiceHandler
			if strings.HasPrefix(x.Name.Name, "Register") && strings.HasSuffix(x.Name.Name, "ServiceHandler") {
				if serviceInfo == nil {
					serviceInfo = &ServiceInfo{
						PackageName: node.Name.Name,
						HandlerName: x.Name.Name,
						ImportPath:  getImportPath(filePath),
					}

					// Extract service name t·ª´ handler name
					serviceName := strings.TrimPrefix(x.Name.Name, "Register")
					serviceName = strings.TrimSuffix(serviceName, "ServiceHandler")
					serviceInfo.ServiceName = serviceName
				}
			}
		}
		return true
	})

	return serviceInfo, nil
}

func getImportPath(filePath string) string {
	// Convert file path to import path
	// V√≠ d·ª•: /path/to/sf-proto/gen/iot_device/v1/iot_device.pb.go -> github.com/anhvanhoa/sf-proto/gen/iot_device/v1
	parts := strings.Split(filePath, string(filepath.Separator))

	// T√¨m v·ªã tr√≠ c·ªßa "gen"
	genIndex := -1
	for i, part := range parts {
		if part == "gen" {
			genIndex = i
			break
		}
	}

	if genIndex == -1 {
		return ""
	}

	// L·∫•y ph·∫ßn t·ª´ gen tr·ªü ƒëi
	genParts := parts[genIndex:]
	// Lo·∫°i b·ªè file name
	genParts = genParts[:len(genParts)-1]

	return "github.com/anhvanhoa/sf-proto/" + strings.Join(genParts, "/")
}

func findServiceHandlers(services []ServiceInfo) ([]ServiceInfo, error) {
	var handlers []ServiceInfo

	for _, service := range services {
		// Ki·ªÉm tra xem c√≥ function Register*ServiceHandler kh√¥ng
		if service.HandlerName != "" {
			handlers = append(handlers, service)
		}
	}

	return handlers, nil
}

func createServiceHandlersFile(handlers []ServiceInfo) error {
	handlersFilePath := "src/handler/service_handlers.go"

	// T·∫°o imports cho c√°c services
	var imports []string
	imports = append(imports, `"context"`)
	imports = append(imports, `"github.com/grpc-ecosystem/grpc-gateway/v2/runtime"`)
	imports = append(imports, `"google.golang.org/grpc"`)

	// Th√™m imports cho c√°c services
	importMap := make(map[string]string)
	for _, handler := range handlers {
		alias := fmt.Sprintf("proto_%s", handler.Folder)
		importMap[handler.ImportPath] = alias
		imports = append(imports, fmt.Sprintf(`%s "%s"`, alias, handler.ImportPath))
	}

	// T·∫°o n·ªôi dung file
	var newContent strings.Builder

	// Package declaration
	newContent.WriteString("package handler\n\n")

	// Imports
	newContent.WriteString("import (\n")
	for _, imp := range imports {
		newContent.WriteString("\t" + imp + "\n")
	}
	newContent.WriteString(")\n\n")

	// ServiceHandler struct
	newContent.WriteString("type ServiceHandler struct {\n")
	newContent.WriteString("\tHandler func(ctx context.Context, mux *runtime.ServeMux, conn *grpc.ClientConn) error\n")
	newContent.WriteString("\tSwagger string\n")
	newContent.WriteString("}\n\n")

	// GetServiceHandlers function
	newContent.WriteString("// GetServiceHandlers tr·∫£ v·ªÅ map ch·ª©a t·∫•t c·∫£ service handlers\n")
	newContent.WriteString("func GetServiceHandlers() map[string]ServiceHandler {\n")
	newContent.WriteString("\treturn map[string]ServiceHandler{\n")

	// Th√™m c√°c handlers
	for _, handler := range handlers {
		alias := importMap[handler.ImportPath]
		// Use relative path for swagger files in Docker container
		swaggerPath := filepath.Join("swagger", handler.Folder, "v1", handler.Folder+".swagger.json")
		// Convert to forward slashes for consistency
		swaggerPath = strings.ReplaceAll(swaggerPath, "\\", "/")
		newContent.WriteString(fmt.Sprintf("\t\t\"%s\": {\n", handler.Folder))
		newContent.WriteString(fmt.Sprintf("\t\t\tHandler: %s.%s,\n", alias, handler.HandlerName))
		newContent.WriteString(fmt.Sprintf("\t\t\tSwagger: \"%s\",\n", "./"+swaggerPath))
		newContent.WriteString("\t\t},\n")
	}

	newContent.WriteString("\t}\n")
	newContent.WriteString("}\n")

	// Ghi file m·ªõi
	err := os.WriteFile(handlersFilePath, []byte(newContent.String()), 0644)
	if err != nil {
		return fmt.Errorf("kh√¥ng th·ªÉ ghi file service_handlers.go: %v", err)
	}

	return nil
}

func copySwaggerFiles(handlers []ServiceInfo) error {
	// T√¨m ƒë∆∞·ªùng d·∫´n module sf-proto
	cmd := exec.Command("go", "list", "-m", "-f", "{{.Dir}}", "github.com/anhvanhoa/sf-proto")
	output, err := cmd.Output()
	if err != nil {
		return fmt.Errorf("kh√¥ng th·ªÉ t√¨m ƒë∆∞·ªùng d·∫´n sf-proto module: %v", err)
	}
	moduleDir := strings.TrimSpace(string(output))

	// T·∫°o th∆∞ m·ª•c swagger n·∫øu ch∆∞a c√≥
	swaggerDir := "swagger"
	if err := os.MkdirAll(swaggerDir, 0755); err != nil {
		return fmt.Errorf("kh√¥ng th·ªÉ t·∫°o th∆∞ m·ª•c swagger: %v", err)
	}

	// Copy t·ª´ng swagger file
	for _, handler := range handlers {
		// ƒê∆∞·ªùng d·∫´n ngu·ªìn
		sourcePath := filepath.Join(moduleDir, "gen", handler.Folder, "v1", handler.Folder+".swagger.json")

		// ƒê∆∞·ªùng d·∫´n ƒë√≠ch
		destDir := filepath.Join(swaggerDir, handler.Folder, "v1")
		destPath := filepath.Join(destDir, handler.Folder+".swagger.json")

		// T·∫°o th∆∞ m·ª•c ƒë√≠ch n·∫øu ch∆∞a c√≥
		if err := os.MkdirAll(destDir, 0755); err != nil {
			return fmt.Errorf("kh√¥ng th·ªÉ t·∫°o th∆∞ m·ª•c ƒë√≠ch %s: %v", destDir, err)
		}

		// Copy file
		if err := copyFile(sourcePath, destPath); err != nil {
			fmt.Printf("‚ö†Ô∏è  Kh√¥ng th·ªÉ copy swagger file cho %s: %v\n", handler.Folder, err)
			continue
		}

		fmt.Printf("‚úÖ ƒê√£ copy swagger file: %s\n", handler.Folder)
	}

	return nil
}

func copyFile(src, dst string) error {
	// ƒê·ªçc file ngu·ªìn
	sourceFile, err := os.Open(src)
	if err != nil {
		return err
	}
	defer sourceFile.Close()

	// T·∫°o file ƒë√≠ch
	destFile, err := os.Create(dst)
	if err != nil {
		return err
	}
	defer destFile.Close()

	// Copy n·ªôi dung
	_, err = destFile.ReadFrom(sourceFile)
	return err
}
